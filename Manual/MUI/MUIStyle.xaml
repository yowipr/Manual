<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:MUI="clr-namespace:Manual.MUI"
                    xmlns:UI="clr-namespace:Manual.API"
                    xmlns:obj="clr-namespace:Manual.Objects"
                    xmlns:themes="clr-namespace:ManualToolkit.Themes;assembly=ManualToolkit"
                    xmlns:core="clr-namespace:Manual.Core">

    <CornerRadius x:Key="windowCorner">16</CornerRadius>

    <core:PointNormalizerConverter x:Key="pointNormalizerConverter"/>
    <core:GridLengthConverter x:Key="gridLengthConverter" />
    <core:ColorMixerMultiConverter x:Key="colorMixerMultiConverter"/>
    <core:ImageToColorConverter x:Key="imageToColorConverter"/>

    <core:SKBitmapToImageSourceConverter x:Key="SKBitmapToImageSourceConverter"/>
    <core:DisplayPathConverter x:Key="DisplayPathConverter"/>
    
    
    <DataTemplate x:Key="SeparatorTemplate">
        <TextBlock Text="─────────" FontStyle="Italic"/>
    </DataTemplate>
    <DataTemplate x:Key="DefaultTemplate">
        <TextBlock Text="{Binding Converter={StaticResource DisplayPathConverter}, ConverterParameter={Binding ElementName=ItemsListBox}}"/>
    </DataTemplate>
    
    <!--  Shots Style  -->
    <Style x:Key="ShotTabItem" TargetType="TabItem">

        <Setter Property="Foreground" Value="{StaticResource fg}" />
        <Setter Property="FontFamily" Value="Blender Book Pro" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Header" Value="{Binding Name}" />
        <Setter Property="Margin" Value="0,-3,0,0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="TextBlock.FontWeight" Value="Normal"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid Margin="5 0 5 0">


                        <Border
                           x:Name="border"
                           Background="Transparent"
                           BorderBrush="{StaticResource bg4}"
                           BorderThickness="0"
                           CornerRadius="14 14 0 0">

                            <Grid>

                                <Border x:Name="borderMouseOver" Background="{DynamicResource fg_high}" Opacity="0.56" Visibility="Collapsed" Margin="10"/>
                                <StackPanel Orientation="Horizontal"  Margin="30 0 40 0"  HorizontalAlignment="Center" VerticalAlignment="Center">
                                <TextBlock Text="{Binding SavedPath, Converter={StaticResource filePathToFolderNameConverter}}" Margin="0 0 3 0" Opacity="0.4"/>
                                    <ContentPresenter
                                   x:Name="contentPresenter" 
                                   ContentSource="Header"
                                   RecognizesAccessKey="True">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <obj:NamerText DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=DataContext}"
                                             NameText="{Binding Name}" TextBlock.FontWeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=TextBlock.FontWeight}"/>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                                   
                                </StackPanel>

                                <TextBlock HorizontalAlignment="Right" Text="●" Margin="8 2" Visibility="{Binding IsSaved, Converter={StaticResource boolToVisibilityConverterInverse}}"/>
                                
                                <Button
                                   x:Name="close"
                                   Width="20"
                                   Height="20"
                                   Margin="0,-1,2,0"
                                   Padding="-4"
                                   Background="Transparent"
                                   BorderBrush="Transparent"
                                   Command="{Binding CloseShotCommand}"
                                   Content="✕"
                                   HorizontalAlignment="Right"
                                   FontSize="10"
                                   Foreground="white"
                                   Style="{StaticResource SubButton}"
                                   Visibility="Hidden" />

                                
                                <!--BORDER CORNER INVERSE-->
                                <!--<themes:InverseBorder x:Name="inverseBorderRight" Visibility="Visible" SnapsToDevicePixels="True" Margin="0 -2 -9.5 0" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsHitTestVisible="False"/>
                                <themes:InverseBorder x:Name="inverseBorderLeft" Visibility="Visible" SnapsToDevicePixels="True"  Margin="-10.3 0 0 -10" HorizontalAlignment="Left" VerticalAlignment="Bottom" IsHitTestVisible="False">
                                    <themes:InverseBorder.RenderTransform>
                                        <RotateTransform Angle="275"/>
                                    </themes:InverseBorder.RenderTransform>
                                </themes:InverseBorder>-->

                                <Rectangle x:Name="inRight" Width="10" Height="10" Fill="{DynamicResource fg2}" Visibility="Collapsed"
                                           Margin="0 0 -9 1" VerticalAlignment="Bottom"
                                           HorizontalAlignment="Right">
                                    <Rectangle.Clip>
                                        <GeometryGroup FillRule="EvenOdd">
                                            <RectangleGeometry Rect="0 0 11 11"/>
                                            <EllipseGeometry Center="11,0" RadiusX="11" RadiusY="10"/>
                                        </GeometryGroup>
                                    </Rectangle.Clip>
                                </Rectangle>
                                <Rectangle x:Name="inLeft" Width="10" Height="10" Fill="{DynamicResource fg2}" Visibility="Collapsed"
                                           Margin="-10 0 0 -9" VerticalAlignment="Bottom"
                                           HorizontalAlignment="Left">
                                    <Rectangle.Clip>
                                        <GeometryGroup FillRule="EvenOdd">
                                            <RectangleGeometry Rect="0 -1 11 11"/>
                                            <EllipseGeometry Center="11,0" RadiusX="11" RadiusY="10"/>
                                        </GeometryGroup>
                                    </Rectangle.Clip>
                                    <Rectangle.RenderTransform>
                                        <RotateTransform Angle="275"/>
                                    </Rectangle.RenderTransform>
                                </Rectangle>

                                <!--GLOW-->
                                <Border Margin="12 12 12 0" Opacity="0.40" CacheMode="BitmapCache"
                                   Background="{Binding Thumbnail, Converter={StaticResource imageToColorConverter}}">
                                    <Border.Effect>
                                        <BlurEffect Radius="50"/>
                                    </Border.Effect>
                                </Border>

                            </Grid>
                        </Border>

                        <ProgressBar
                           Maximum="1"
                           Height="4"
                           VerticalAlignment="Bottom"
                           Background="Transparent"
                           BorderBrush="{x:Null}"
                          
                           IsHitTestVisible="False"
                           Visibility="{Binding IsGenerating, Converter={StaticResource boolToVisibilityConverter}}"
                           Value="{Binding Progress}" Opacity="1">
                            <ProgressBar.Foreground>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                    <GradientStop Color="#FF6D32ED" Offset="0"/>
                                    <GradientStop Color="#006D32ED" Offset="1"/>
                                </LinearGradientBrush>
                            </ProgressBar.Foreground>
                        </ProgressBar>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="contentPresenter" Property="TextBlock.Foreground" Value="white" />
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource fg2}"/>

                            <!--<Setter TargetName="inverseBorderRight" Property="Visibility" Value="Visible" />
                            <Setter TargetName="inverseBorderLeft" Property="Visibility" Value="Visible" />-->
                            <Setter TargetName="inLeft" Property="Visibility" Value="Visible" />
                            <Setter TargetName="inRight" Property="Visibility" Value="Visible" />

                            <Setter Property="TextBlock.FontWeight" Value="Bold"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            
                            <Setter TargetName="close" Property="Visibility" Value="Visible" />

                            <Setter TargetName="borderMouseOver" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <!--CUSTOM OBJECTS STYLE-->
    <Style TargetType="{x:Type UI:M_TextBox}">
       <Setter Property="Foreground" Value="{StaticResource fg}" />
       <Setter Property="Margin" Value="0,1,0,1" />
       <Setter Property="Padding" Value="10,1,10,1" />
       <Setter Property="Width" Value="Auto" />
       <Setter Property="Height" Value="25" />
       <Setter Property="TextAlignment" Value="Center" />
       <Setter Property="CaretBrush" Value="{StaticResource fg}"/>

       <Setter Property="Template">
           <Setter.Value>
               <ControlTemplate TargetType="{x:Type TextBox}">
                   <Border x:Name="border"
                           BorderBrush="{x:Null}"
                       BorderThickness="{TemplateBinding BorderThickness}"
                       Background="{StaticResource bg3}"
                       CornerRadius="5">
                       <ScrollViewer x:Name="PART_ContentHost"
                                 Focusable="false"
                                 HorizontalScrollBarVisibility="Hidden"
                                 VerticalScrollBarVisibility="Hidden" 
                                     VerticalAlignment="Center"/>
                   </Border>
                   <ControlTemplate.Triggers>
                       <Trigger Property="IsEnabled"
                            Value="false">
                           <Setter Property="Foreground"
                               Value="{StaticResource fg2}" />
                       </Trigger>

                       <Trigger Property="IsFocused" Value="True">
                           <Setter TargetName="border" Property="Background" Value="{StaticResource bg4}"/>
                       </Trigger>

                   </ControlTemplate.Triggers>
               </ControlTemplate>
           </Setter.Value>
       </Setter>
   </Style>


    <Style TargetType="{x:Type MUI:M_SliderBox}">
        <Setter Property="BackgroundColor" Value="{StaticResource bg4}"/>
    </Style>
    
    
    
    

   <!--<Style TargetType="{x:Type UI:M_PromptBox}">
       <Setter Property="Foreground" Value="{DynamicResource fg}" />
       <Setter Property="Margin" Value="5,1,5,1" />
       <Setter Property="Width" Value="Auto" />
       <Setter Property="TextAlignment" Value="Left" />
       <Setter Property="TextWrapping" Value="Wrap"/>
       <Setter Property="Padding" Value="30, 20"/>
       <Setter Property="Height" Value="120"/>
        <Setter Property="FontFamily" Value="{StaticResource span}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="CaretBrush" Value="{StaticResource fg}"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Template">
           <Setter.Value>
               <ControlTemplate TargetType="{x:Type TextBox}">
                   <Border BorderBrush="{DynamicResource fg2}"
                       BorderThickness="{TemplateBinding BorderThickness}"
                       Background="{DynamicResource bg4}" 
                       CornerRadius="{Binding Path=(themes:CustomFields.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                       <ScrollViewer x:Name="PART_ContentHost"
                                 Focusable="false"
                                 HorizontalScrollBarVisibility="Hidden"
                                 VerticalScrollBarVisibility="Hidden" />
                   </Border>
                   <ControlTemplate.Triggers>
                       <Trigger Property="IsEnabled"
                            Value="false">
                           <Setter Property="Foreground"
                               Value="{StaticResource fg2}" />
                       </Trigger>
                   </ControlTemplate.Triggers>
               </ControlTemplate>
           </Setter.Value>
       </Setter>
   </Style>-->


    
    
    
    
    
    <SolidColorBrush x:Key="Thumb.Static.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="#FFACACAC"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Foreground" Color="#FFE5E5E5"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#FFDCECFC"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="#FF7Eb4EA"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="#FFDAECFC"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="#FF569DE5"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="#FFE7EAEA"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="#FFD6D6D6"/>
    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path Opacity="0" x:Name="grip" Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z" Fill="Transparent" Stroke="Transparent" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
            <Border x:Name="gripper" CornerRadius="4" Background="{StaticResource fg2}"  BorderBrush="{StaticResource fg2}">

            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{StaticResource SliderThumb.Static.Background}" Stroke="{StaticResource SliderThumb.Static.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{StaticResource SliderThumb.Static.Background}" Stroke="{StaticResource SliderThumb.Static.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="1" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    
    
    <!--REAL TEMPLATE-->
    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border x:Name="border" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,20" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                <Border x:Name="TrackBackground" CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0" Height="{TemplateBinding Height}" Margin="0,0" Grid.Row="1" VerticalAlignment="center">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange" Height="20" Visibility="Hidden"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1" Opacity="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton x:Name="filledTrack" Opacity="1" Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" Background="{TemplateBinding Foreground}" Height="{TemplateBinding Height}" Margin="0 0 -10 0"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="{TemplateBinding Height}" Width="10" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Setter Property="Opacity" TargetName="Thumb" Value="0"/>
            </Trigger>
            <!--<Trigger Property="Value" Value="0">
                <Setter Property="Opacity" TargetName="filledTrack" Value="0"/>
            </Trigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5z" Fill="{StaticResource SliderThumb.Static.Background}" Stroke="{StaticResource SliderThumb.Static.Border}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z" Fill="{StaticResource SliderThumb.Static.Background}" Stroke="{StaticResource SliderThumb.Static.Border}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z" Fill="{StaticResource SliderThumb.Static.Background}" Stroke="{StaticResource SliderThumb.Static.Border}" Stretch="Fill"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <Border x:Name="border" Background="Blue" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4"/>
                <TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4"/>
                <Border x:Name="TrackBackground" Background="{StaticResource SliderThumb.Track.Background}" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Grid.Column="1" HorizontalAlignment="center" Margin="0,5" Width="4.0">
                    <Canvas Margin="-1,-6">
                        <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0"/>
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb" Focusable="False" Height="11" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbVerticalDefault}" VerticalAlignment="Top" Width="18"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalLeft}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVerticalRight}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="Red"/>
        <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="IsMoveToPointEnabled" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
            </Trigger>
        </Style.Triggers>
    </Style>








    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="Transparent"/>
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="White"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="Transparent"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="Transparent"/>
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="White"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="Transparent"/>
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="Transparent"/>
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="White"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0" StrokeDashArray="1 2" Stroke="Black" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="Transparent" HorizontalAlignment="Center" Height="19" Stroke="Transparent" VerticalAlignment="Center" Width="19"/>
                            
                            <!--<Path x:Name="arrowu" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>-->
    
                            <Path Visibility="Collapsed" Margin="0" Style="{StaticResource PathArrow}" x:Name="arrow" HorizontalAlignment="Center"  SnapsToDevicePixels="false" VerticalAlignment="Center"/>


                            <Rectangle Style="{StaticResource ArrowRect}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0 0 0 3"/>

                            
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,-3,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Margin" TargetName="arrow" Value="10 0 -7 -2.5"/>
                            <Setter Property="RenderTransform" TargetName="arrow">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                           
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                           
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                           
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                           
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                           
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                           
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="45"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
                                
    <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
    
                                <Path Style="{StaticResource PathArrow}" x:Name="arrowu" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center"  SnapsToDevicePixels="false" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 0 0 L 4 4 L 0 8"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
                            <Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" SnapsToDevicePixels="false" StrokeThickness="2" VerticalAlignment="Center"/>
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" Grid.Row="1" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                           
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                          
                            <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type MUI:M_Expander}">
        <Setter Property="Foreground" Value="{StaticResource fg}"/>
        <Setter Property="Background" Value="{DynamicResource bg}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="Margin" Value="0,0,0,3"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MUI:M_Expander}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="11" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}" Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,5,5" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.LayoutTransform>
                                    <ScaleTransform ScaleY="0"/>
                                </ContentPresenter.LayoutTransform>

                            </ContentPresenter>
                        </DockPanel>

                      
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                        </Trigger>-->
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>


                        <Trigger Property="IsExpanded" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpandSite"
                             Storyboard.TargetProperty=
                               "(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                             To="1"
                             Duration="0:0:0.17">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimation Storyboard.TargetName="ExpandSite"
                                                Storyboard.TargetProperty=
                                                  "Opacity"
                                                To="1"
                                                Duration="0:0:0.17">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpandSite"
                                                Storyboard.TargetProperty=
                                                  "(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                To="0"
                                                Duration="0:0:0.17">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimation Storyboard.TargetName="ExpandSite"
                                                   Storyboard.TargetProperty=
                                                     "Opacity"
                                                   To="0"
                                                   Duration="0:0:0.17">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>


                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    
    <Style TargetType="{x:Type MUI:M_ComboBox}">
        <Setter Property="Background" Value="{StaticResource fg2}"/>
    </Style>

 

    <!--<Style TargetType="{x:Type MUI:M_ComboBox}">
       <Setter Property="Foreground" Value="{StaticResource fg}" />
       <Setter Property="Margin" Value="3 0 3 0"/>
       <Setter Property="Template">
           <Setter.Value>
               <ControlTemplate TargetType="ComboBox">
                   <Grid>
                       <ToggleButton x:Name="ToggleButton" Grid.Column="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" >
                           <ToggleButton.Template>
                               <ControlTemplate>
                                   <Grid>
                                       <Grid.ColumnDefinitions>
                                           <ColumnDefinition Width="5*" />
                                           <ColumnDefinition Width="*" />
                                       </Grid.ColumnDefinitions>
                                       <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="5" Background="{DynamicResource bg4}" BorderBrush="{StaticResource fg2}" BorderThickness="0" />
                                       <Border Opacity="0" Grid.Column="0" CornerRadius="5,0,0,5"  Margin="1"  Background="{StaticResource bg4}"  BorderBrush="Transparent" BorderThickness="0,0,1,0" />
                                       <Path Style="{StaticResource PathArrow}" Width="4" Height="7" Margin="0 0 -7 -2.5" x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center">
                                           <Path.RenderTransform>
                                               <RotateTransform Angle="90" />
                                           </Path.RenderTransform>
                                       </Path>
                                   </Grid>
                                   <ControlTemplate.Triggers>
                                       <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                                           <Setter TargetName="Border" Property="Background" Value="{StaticResource fg2}" />
                                       </Trigger>
                                       <Trigger Property="ToggleButton.IsChecked" Value="true">
                                           <Setter TargetName="Border" Property="Background" Value="{StaticResource bg4}" />
                                       </Trigger>
                                   </ControlTemplate.Triggers>
                               </ControlTemplate>
                           </ToggleButton.Template>
                       </ToggleButton>
                       <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10 3 3 3" Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                       <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
                       <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{Binding ElementName=ToggleButton, Path=ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                               <Border x:Name="DropDownBorder" Background="{StaticResource bg4}" />
                               <ScrollViewer SnapsToDevicePixels="True">
                                   <StackPanel IsItemsHost="True" />
                               </ScrollViewer>
                           </Grid>
                       </Popup>
                   </Grid>
               </ControlTemplate>
           </Setter.Value>
       </Setter>
       <Style.Triggers>
       </Style.Triggers>
   </Style>

    <Style x:Key="M_ComboBoxItem" TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border x:Name="Border" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" Padding="2">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource fg_high}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource fg_high}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->


    <!-- Define el patrón de transparencia -->
    <DrawingBrush x:Key="TransparentPatternBrush" TileMode="Tile" Viewport="0,0,10,10" ViewportUnits="Absolute" Stretch="None">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="White">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0,5,5" />
                            <RectangleGeometry Rect="5,5,5,5" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="LightGray">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="5,0,5,5" />
                            <RectangleGeometry Rect="0,5,5,5" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>



    <Style TargetType="{x:Type MUI:M_Button}" BasedOn="{StaticResource {x:Type Button}}">
        <!-- Puedes agregar setters específicos para M_Button si es necesario -->
    </Style>

    <Style TargetType="{x:Type MUI:M_Separator}" BasedOn="{StaticResource {x:Type Separator}}">
        <!-- Pue
        des agregar setters específicos para M_Button si es necesario -->
    </Style>
    
    <!--<Style TargetType="{x:Type MUI:M_CheckBox}" BasedOn="{StaticResource {x:Type UserControl}}">
      
    </Style>-->
    
</ResourceDictionary>